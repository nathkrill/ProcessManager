import org.gradle.api.internal.file.copy.CopyAction
import org.gradle.api.internal.file.copy.FileCopyAction

import java.nio.file.Files

/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with Foobar.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'kotlin2js'
apply plugin: 'idea'

description = 'Javascript support for the darwin web interface'

def gendir = file("${projectDir}/gen/sharedjs")
def outDir = "${buildDir}/kotlin2js/main/"

configurations {
    shared
    'default' {
        extendsFrom shared
    }
}

dependencies {
//    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-js-library:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx.html.js:$kotlinx_html_version"
}


sourceSets {
    main {
        kotlin {
            srcDirs+={ gendir }
        }
    }
}




jar {
    from sourceSets.main.allSource
    include "**/*.kt"

    from outDir
    include "**/*"

    manifest {
        attributes(
                "Specification-Title": "Kotlin JavaScript Lib",
                "Kotlin-JS-Module-Name": "darwinjs"
        )
    }
}

jar.dependsOn(compileKotlin2Js)

boolean symlinksSupported() {

    def tmpDir = new File(project.buildDir, "tmp")
    try {
        def linkName=new File(tmpDir, "testSymLink")
        Files.createSymbolicLink(linkName.toPath(), tmpDir.toPath())
        if (linkName.exists() ) {
            try {
                if (Files.isSymbolicLink(linkName.toPath())) {
                    return true;
                }
            } finally {
                linkName.delete()
            }
        }
        return false
    } catch (Exception e) {
        return false
    }

}

if (symlinksSupported()) {
    task copyShared() {
        doFirst {
            def target = new File(gendir.parent, "../../shared/src/main/kotlin").toPath()
            if (gendir.exists()) {
                if (! (Files.isSymbolicLink(gendir.toPath()) && Files.readSymbolicLink(gendir.toPath()).equals(target))) {
                    gendir.deleteDir()
                    Files.createSymbolicLink(gendir.toPath(), target)
                }
            } else {
                Files.createSymbolicLink(gendir.toPath(), target)
            }
        }
    }
} else {
    task copyShared(type: Copy) {
        from '../shared/src/main/kotlin'
        into gendir
    }
}

compileKotlin2Js {
    dependsOn tasks.copyShared
    kotlinOptions.outputFile = outDir + "darwin.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.suppressWarnings = true
    kotlinOptions.verbose = true
    kotlinOptions.metaInfo = true
}

clean.doLast {
    gendir.deleteDir()
}

idea {
    module {
//        sourceDirs -= gendir
        generatedSourceDirs += gendir
        name="darwinjs"
/*

        module.iml.withXml {
            it.asNode().component.content.sourceFolder
                    .find { it.@url.contains('/gen/') }
                    .each { node ->
                def attrs= attributes()
                atts.put('generated', 'true')
                logger.quiet("Updated generated folders")
            }
        }
*/

    }
}
