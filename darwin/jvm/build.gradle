/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'kotlin'
apply plugin: 'war'

description = 'Main darwin web interface ported from PHP/GWT'

configurations {
  javascript
  warConfig
}

/*
sourceSets {
    main {
        kotlin {
            srcDirs+="../shared/src/main/kotlin"
        }
    }
}
*/

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinx_html_version"
    compile project(":darwin:shared")
    compileOnly "org.apache.tomcat:tomcat-servlet-api:${tomcatVersion}"
    compileOnly project(":DarwinJavaApi")
    javascript "org.webjars:requirejs:${requirejs_version}"
    javascript project(":darwin:js")
//    javascript project(":accountmgr:js")
}

tasks.war {
    dependsOn configurations.javascript
    configurations.javascript.each { File file ->
        logger.lifecycle("Adding javascript dependency "+file.toString())
        into("js") {
            from zipTree(file.absolutePath)
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js")&& path.startsWith("META-INF/resources") || !path.startsWith("META-INF/")
            }
            eachFile { fileCopyDetails ->
                def mysrc = fileCopyDetails.sourcePath
                def i = mysrc.lastIndexOf('/')
                if (fileCopyDetails.sourcePath.startsWith("META-INF") && i>0) {
                    def myNewPath = 'js/'+mysrc.substring(i+1)
                    logger.lifecycle("Renaming ${fileCopyDetails.sourcePath} to $myNewPath")
                    fileCopyDetails.path = myNewPath
                }

            }
            exclude { f ->
                def r = f.name.endsWith(".class") || (f.name.endsWith(".kjsm") && f.path.startsWith("kotlinx.html.shared"))
                if (r) logger.info("Skipping inclusion of `${f.relativePath.pathString}` into javascript path")
                return r
            }
        }
    }
}

artifacts { warConfig tasks.war }

sourceCompatibility = myJavaVersion
targetCompatibility = myJavaVersion
