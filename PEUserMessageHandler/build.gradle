buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}


apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'gwt'

version = '1.0.0'
description = 'The service that handles tasks for users (and functions as web interface entry point'
group = ['service', 'server']

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

configurations {
    apiCompile
    apiProvided
    main {
        extendsFrom apiCompile
    }
}

def genImageDir = "$buildDir/generated-images"
def genResourceDir = "$buildDir/genResources"

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
        compileClasspath += configurations.apiProvided
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir genResourceDir
        }
        compileClasspath += files(api.runtimeClasspath)
    }
    imageSource {
        output.dir(genImageDir, builtBy: 'generateImages')
        files('images/blackSplitPanel.svg',
                'images/arrow.svg')
    }
}

class PngGenerator extends Exec {
    @InputFile
    File inputFile

    @OutputFile
    File outputFile

    @Override
    protected void exec() {
        if (!outputFile.parentFile.exists()) {
            outputFile.parentFile.mkdirs()
        }
        setExecutable('inkscape')
        setArgs(['-e', outputFile, inputFile])
        super.exec()
    }
}

task generateSplitPanel(type: PngGenerator) {
    inputFile = file('images/blackSplitPanel.svg')
    outputFile = new File(genResourceDir, 'nl/adaptivity/process/userMessageHandler/client/blackSplitPanel.png')
    description = "Generate ${outputFile} from ${inputFile}.svg"
    group = "codegen"
}

['arrow', 'diagramBackground', 'endNode', 'startNode'].each { String file ->
    task "generate${Character.toUpperCase(file.charAt(0))}${file.substring(1)}"(type: PngGenerator) {
        description = "Generate ${file}.png from ${file}.svg"
        group = "codegen"
        inputFile = project.file("images/${file}.svg")
        outputFile = new File(genImageDir + '/images', "${file}.png")
    }

}

processResources.dependsOn(generateSplitPanel)

task tomcatRun(dependsOn: ["war"]) {
    group = 'web application'
    description = "Do everything needed to be able to run as embedded tomcat"
}
/*
jar {
    from sourceSets.api.output
    from sourceSets.main.output
}
*/
war {
    dependsOn generateSplitPanel
    dependsOn project.tasks['generateArrow']
    dependsOn project.tasks['generateDiagramBackground']
    dependsOn project.tasks['generateEndNode']
    dependsOn project.tasks['generateStartNode']
    classpath sourceSets.api.output
    from fileTree(genImageDir)
//    dependsOn(project.task('apiCompile'))
//    from tasks.apiCompile {
//        into 'WEB-INF/classes'
//    }
}

gwt {
    gwtVersion = '2.6.1'
    modules 'nl.adaptivity.darwin.gwt.Darwin'
    modules 'nl.adaptivity.process.userMessageHandler.PEUserMessageHandler'
}

/*
tomcat {
    contextPath='/PEUserMessageHandler'
}
*/
dependencies {
    apiProvided "org.apache.tomcat:servlet-api:${tomcatVersion}"
//    providedCompile "org.apache.tomcat:servlet-api:${tomcatVersion}"
    apiCompile project(':DarwinJavaApi')
    apiCompile project(':PE-common')

//    compile 'com.google.gwt:gwt-user:2.6.1'
    compile project(':DarwinClients')
}
