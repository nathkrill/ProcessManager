/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with Foobar.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}


apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'gwt'

version = '1.0.0'
description = 'The service that handles tasks for users (and functions as web interface entry point'
//group = ['service', 'server']

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

configurations {
    apiCompile
    main {
        extendsFrom apiCompile
    }
    wsDoc {
        description "Dependencies needed to run the custom web service doclet."
    }
}

def genImageDir = "$projectDir/gen/generated-images"
def genResourceDir = "$projectDir/gen/genResources"

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        java {
            srcDirs sourceSets.api.allSource
        }
        resources {
            srcDir genResourceDir
        }
        compileClasspath += files(api.compileClasspath)
    }
//    imageSource {
//        output.dir(genImageDir, builtBy: 'generateImages')
//        files('images/blackSplitPanel.svg',
//                'images/arrow.svg')
//    }
}

class PngGenerator extends Exec {
    @InputFile
    File inputFile

    @OutputFile
    File outputFile

    @Override
    protected void exec() {
        if (!outputFile.parentFile.exists()) {
            outputFile.parentFile.mkdirs()
        }
        setExecutable('inkscape')
        setArgs(['-e', outputFile, inputFile])
        super.exec()
    }
}

task generateSplitPanel(type: PngGenerator) {
    inputFile = file('images/blackSplitPanel.svg')
    outputFile = new File(genResourceDir, 'nl/adaptivity/process/userMessageHandler/client/blackSplitPanel.png')
    description = "Generate ${outputFile} from ${inputFile}.svg"
    group = "codegen"
}

['arrow', 'diagramBackground', 'endNode', 'startNode'].each { String file ->
    task "generate${Character.toUpperCase(file.charAt(0))}${file.substring(1)}"(type: PngGenerator) {
        description = "Generate ${file}.png from ${file}.svg"
        group = "codegen"
        inputFile = project.file("images/${file}.svg")
        outputFile = new File(genImageDir + '/images', "${file}.png")
    }

}

processResources.dependsOn(generateSplitPanel)

task generateAll {
    group 'codegen'
    dependsOn generateSplitPanel
    dependsOn project.tasks['generateArrow']
    dependsOn project.tasks['generateDiagramBackground']
    dependsOn project.tasks['generateEndNode']
    dependsOn project.tasks['generateStartNode']
}

task tomcatRun(dependsOn: ["war"]) {
    group = 'web application'
    description = "Do everything needed to be able to run as embedded tomcat"
}

jar {
    from sourceSets.main.output
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    appendix 'api'
}

artifacts {
    apiCompile apiJar
}

draftWar {
//    dependsOn generateAll
    classpath sourceSets.api.output
    from fileTree(genImageDir)
//    dependsOn(project.task('apiCompile'))
//    from tasks.apiCompile {
//        into 'WEB-INF/classes'
//    }
}


war {
//    dependsOn generateAll
    classpath sourceSets.api.output
    from fileTree(genImageDir)
//    dependsOn(project.task('apiCompile'))
//    from tasks.apiCompile {
//        into 'WEB-INF/classes'
//    }
}

gwt {
    gwtVersion = '2.6.1'
    modules 'nl.adaptivity.darwin.gwt.Darwin'
    modules 'nl.adaptivity.process.userMessageHandler.PEUserMessageHandler'
    devModules 'nl.adaptivity.darwin.gwt.DarwinDraft'
    devModules 'nl.adaptivity.process.userMessageHandler.UMHDraft'
}

/*
tomcat {
    contextPath='/PEUserMessageHandler'
}
*/
dependencies {
    apiCompileOnly "org.apache.tomcat:tomcat-servlet-api:${tomcatVersion}"
//    providedCompile "org.apache.tomcat:tomcatservlet-api:${tomcatVersion}"
    apiCompileOnly project(':DarwinJavaApi')
    apiCompileOnly project(path: ':PE-common', configuration:'compileOnly')

    apiCompile project(':PE-common')

    runtime 'com.fasterxml.woodstox:woodstox-core:5.0.1'

    compileOnly 'com.google.gwt:gwt-user:2.6.1'
    compile project(':DarwinClients')

    testCompile 'org.testng:testng:6.9.9'
    testCompile 'xmlunit:xmlunit:1.6'
    testCompile project(path: ':PE-common', configuration:'compileOnly')
    testRuntime 'com.fasterxml.woodstox:woodstox-core:5.0.1'

    wsDoc project(":PE-common:endpointDoclet")

}

test {
    useTestNG()
}


task wsDoc(type:Javadoc) {
    dependsOn configurations.wsDoc
    dependsOn configurations.compile
    group = "documentation"
    classpath = sourceSets.main.compileClasspath.filter{f -> !f.path.contains("gwt-user")}
    source = sourceSets.main.allJava
    destinationDir = file("${buildDir}/docs/wsDoc")
    options.docletpath = configurations.wsDoc.files.asType(List)
    options.doclet = "nl.adaptivity.ws.doclet.WsDoclet"

    doFirst() {
        source=project.files(source, project(":PE-common").sourceSets.main.allJava)
    }
}

assemble.dependsOn tasks.wsDoc
