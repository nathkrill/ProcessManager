/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with Foobar.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.09.24 at 08:12:58 PM CEST
//


package org.w3.soapEnvelope;

import net.devrieze.util.StringUtil;
import nl.adaptivity.xml.XmlSerializable;
import nl.adaptivity.util.xml.*;
import nl.adaptivity.xml.*;
import nl.adaptivity.xml.XmlStreaming.EventType;
import nl.adaptivity.xml.schema.annotations.Attribute;
import nl.adaptivity.xml.schema.annotations.Child;
import org.jetbrains.annotations.NotNull;

import javax.xml.namespace.QName;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;


/**
 * <p>
 * Java class for Envelope complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="Envelope">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.w3.org/2003/05/soap-envelope}Header" minOccurs="0"/>
 *         &lt;element ref="{http://www.w3.org/2003/05/soap-envelope}Body"/>
 *       &lt;/sequence>
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@nl.adaptivity.xml.schema.annotations.Element(
        name=Envelope.ELEMENTLOCALNAME,
        nsUri = Envelope.NAMESPACE,
        nsPrefix = Envelope.PREFIX,
        attributes = @Attribute("otherAttributes"),
        children = {@Child(type=Header.class), @Child(type=Body.class)})

@XmlDeserializer(Envelope.Factory.class)
public class Envelope<T extends XmlSerializable> implements XmlSerializable{

  public static class Factory implements XmlDeserializerFactory<Envelope> {

    @Override
    public Envelope<?> deserialize(final XmlReader in) throws XmlException {
      return Envelope.deserialize(in);
    }
  }

  public static final String NAMESPACE = "http://www.w3.org/2003/05/soap-envelope";

  public static final String ELEMENTLOCALNAME = "Envelope";

  public static final String PREFIX = "env";

  public static final QName ELEMENTNAME = new QName(NAMESPACE, ELEMENTLOCALNAME, PREFIX);

  public static final String MIMETYPE = "application/soap+xml";

  protected Header header;

  protected Body<T> mBody;

  private final Map<QName, String> otherAttributes = new HashMap<>();

  private URI encodingStyle = URI.create("http://www.w3.org/2003/05/soap-encoding");

  public Envelope() {
  }

  public Envelope(final Body<T> body) {
    this();
    mBody = body;
  }

  public Envelope(final T content) {
    this(new Body<>(content));
  }

  public static Envelope<CompactFragment> deserialize(final XmlReader in) throws XmlException {
    return deserialize(in, CompactFragment.FACTORY);
  }

  public static <T extends XmlSerializable> Envelope<T> deserialize(final XmlReader in, final XmlDeserializerFactory<T> bodyDeserializer) throws XmlException {
    final Envelope<T> result = new Envelope<T>();
    XmlReaderUtil.skipPreamble(in);
    final QName elementName = result.getElementName();
    assert XmlReaderUtil.isElement(in, elementName) : "Expected " + elementName + " but found " + in.getLocalName();
    for(int i = in.getAttributeCount() - 1; i >= 0; --i) {
      result.deserializeAttribute(in.getAttributeNamespace(i), in.getAttributeLocalName(i), in.getAttributeValue(i));
    }
    EventType event = null;
    loop: while (in.hasNext() && event != XmlStreaming.END_ELEMENT) {
      switch ((event = in.next())) {
        case START_ELEMENT:
          if (result.deserializeChild(in, bodyDeserializer)) {
            continue loop;
          }
          XmlReaderUtil.unhandledEvent(in);
          break;
        default:
          XmlReaderUtil.unhandledEvent(in);
      }
    }
    return result;
  }

  public QName getElementName() {
    return ELEMENTNAME;
  }

  public boolean deserializeAttribute(final CharSequence attributeNamespace, final CharSequence attributeLocalName, final CharSequence attributeValue) {
    if (StringUtil.isEqual("encodingStyle", attributeLocalName)) {
      setEncodingStyle(URI.create(StringUtil.toString(attributeValue)));
      return true;
    }
    QName qname = new QName(StringUtil.toString(attributeNamespace), StringUtil.toString(attributeLocalName));
    otherAttributes.put(qname, StringUtil.toString(attributeValue));
    return true;
  }

  public boolean deserializeChild(final XmlReader in, final XmlDeserializerFactory<T> bodyDeserializer) throws XmlException {
    if (StringUtil.isEqual(NAMESPACE,in.getNamespaceUri())) {
      if (StringUtil.isEqual(Header.ELEMENTLOCALNAME, in.getLocalName())) {
        setHeader(Header.deserialize(in));
        return true;
      } else if (StringUtil.isEqual(Body.ELEMENTLOCALNAME, in.getLocalName())) {
        setBody(Body.deserialize(in, bodyDeserializer));
        return true;
      }
    }
    return false;
  }

  @Override
  public void serialize(final XmlWriter out) throws XmlException {
    XmlWriterUtil.smartStartTag(out, getElementName());
    XmlWriterUtil.writeAttribute(out, "encodingStyle", encodingStyle);
    for(Entry<QName, String> attr:otherAttributes.entrySet()) {
      XmlWriterUtil.writeAttribute(out, attr.getKey(), attr.getValue());
    }
    XmlWriterUtil.writeChild(out, header);
    XmlWriterUtil.writeChild(out, mBody);
    XmlWriterUtil.endTag(out, getElementName());
  }

  /**
   * Gets the value of the header property.
   *
   * @return possible object is {@link Header }
   */
  public Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the header property.
   *
   * @param value allowed object is {@link Header }
   */
  public void setHeader(final Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the body property.
   *
   * @return possible object is {@link Body }
   */
  public Body<? extends T> getBody() {
    return mBody;
  }

  /**
   * Sets the value of the body property.
   *
   * @param value allowed object is {@link Body }
   */
  public void setBody(final Body<T> value) {
    this.mBody = value;
  }

  /**
   * Gets a map that contains attributes that aren't bound to any typed property
   * on this class.
   * <p>
   * the map is keyed by the name of the attribute and the value is the string
   * value of the attribute. the map returned by this method is live, and you
   * can add new attribute by updating the map directly. Because of this design,
   * there's no setter.
   *
   * @return always non-null
   */
  @NotNull
  public Map<QName, String> getOtherAttributes() {
    return otherAttributes;
  }

  public URI getEncodingStyle() {
    return encodingStyle;
  }

  public void setEncodingStyle(final URI encodingStyle) {
    this.encodingStyle = encodingStyle;
  }

}
