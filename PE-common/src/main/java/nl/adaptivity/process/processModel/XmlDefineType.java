//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.08.27 at 08:15:55 PM CEST
//


package nl.adaptivity.process.processModel;

import java.io.CharArrayReader;
import java.sql.SQLException;

import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;

import net.devrieze.util.Transaction;
import nl.adaptivity.process.ProcessConsts.Engine;
import nl.adaptivity.process.engine.PETransformer;
import nl.adaptivity.process.engine.ProcessData;
import nl.adaptivity.process.exec.IProcessNodeInstance;

import nl.adaptivity.util.xml.XmlDeserializer;
import nl.adaptivity.util.xml.XmlDeserializerFactory;
import nl.adaptivity.util.xml.XmlUtil;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.NodeList;


@XmlDeserializer(XmlDefineType.Factory.class)
public class XmlDefineType extends XPathHolder implements IXmlDefineType {

  public static class Factory implements XmlDeserializerFactory<XmlDefineType> {

    @Override
    public XmlDefineType deserialize(final XMLStreamReader in) throws XMLStreamException {
      return XmlDefineType.deserialize(in);
    }
  }

  public static final String ELEMENTLOCALNAME = "define";

  private String refNode;

  private String refName;

  public XmlDefineType() {}

  public XmlDefineType(final String pName, final String pRefNode, final String pRefName, String pPath, final char[] pContent, final NamespaceContext pOriginalNSContext) {
    super(pContent, pOriginalNSContext, pPath, pName);
    refNode = pRefNode;
    refName = pRefName;
  }

  public static XmlDefineType deserialize(final XMLStreamReader pIn) throws XMLStreamException {
    return deserialize(pIn, new XmlDefineType());
  }

  @Override
  protected boolean deserializeAttribute(final String pAttributeLocalName, final String pAttributeValue) {
    switch (pAttributeLocalName) {
      case "refnode": setRefNode(pAttributeValue); return true;
      case "refname": setRefName(pAttributeValue); return true;
      default:
        return super.deserializeAttribute(pAttributeLocalName, pAttributeValue);
    }
  }

  @Override
  protected void serializeStartElement(final XMLStreamWriter pOut) throws XMLStreamException {
    XmlUtil.writeStartElement(pOut, new QName(Engine.NAMESPACE, ELEMENTLOCALNAME, Engine.NSPREFIX));
  }

  @Override
  protected void serializeAttributes(final XMLStreamWriter out) throws XMLStreamException {
    super.serializeAttributes(out);
    XmlUtil.writeAttribute(out, "refnode", getRefNode());
    XmlUtil.writeAttribute(out, "refname", getRefName());
  }

  /* (non-Javadoc)
     * @see nl.adaptivity.process.processModel.IXmlDefineType#getRefNode()
     */
  @Override
  public String getRefNode() {
    return refNode;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.IXmlDefineType#setRefNode(String)
   */
  @Override
  public void setRefNode(final String value) {
    this.refNode = value;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.XmlImportType#getName()
   */
  @Override
  public String getRefName() {
    return refName;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.XmlImportType#setName(java.lang.String)
   */
  @Override
  public void setRefName(final String value) {
    this.refName = value;
  }

  /**
   *
   * @param pExport
   * @return
   */
  public static XmlDefineType get(IXmlDefineType pExport) {
    if (pExport instanceof XmlDefineType) { return (XmlDefineType) pExport; }
    XmlDefineType result = new XmlDefineType(pExport.getName(), pExport.getRefNode(),pExport.getRefName(), pExport.getPath(), pExport.getContent(), pExport.getOriginalNSContext());
    return result;
  }

  @Override
  public <T extends IProcessNodeInstance<T>> ProcessData apply(Transaction pTransaction, IProcessNodeInstance<T> pNode) throws SQLException {
    final ProcessData processData;
    if (refNode!=null) {
      IProcessNodeInstance<T> predecessor = pNode.getPredecessor(pTransaction, refNode);
      ProcessData origpair = predecessor.getResult(pTransaction, refName);
      if (origpair==null) {
        processData = null;
      } else {
        try {
          if (getXPath()==null) {
            processData = new ProcessData(getName(), origpair.getDocumentFragment());
          } else {
            processData = new ProcessData(getName(), (NodeList) getXPath().evaluate(origpair.getNodeValue(), XPathConstants.NODESET));
          }
        } catch (XPathExpressionException e) {
          throw new RuntimeException(e);
        }
      }
    } else {
      processData = null;
    }
    char[] content = getContent();
    if (getContent()!=null && getContent().length>0) {
      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      dbf.setNamespaceAware(true);
      DocumentFragment result = null;
      try {
        result = dbf.newDocumentBuilder().newDocument().createDocumentFragment();
        PETransformer.create(getNamespaceContext(), processData).transform(new StreamSource(new CharArrayReader(content)), new DOMResult(result));
      } catch (ParserConfigurationException | XMLStreamException pE) {
        throw new RuntimeException(pE);
      }

      return new ProcessData(getName(), result);
    } else {
      return processData;
    }
  }

}
