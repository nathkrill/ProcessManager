//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.08.27 at 08:15:55 PM CEST
//


package nl.adaptivity.process.processModel;

import net.devrieze.util.Transaction;
import nl.adaptivity.process.ProcessConsts.Engine;
import nl.adaptivity.process.engine.PETransformer;
import nl.adaptivity.process.engine.ProcessData;
import nl.adaptivity.process.exec.IProcessNodeInstance;
import nl.adaptivity.util.xml.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.w3c.dom.NodeList;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;

import java.sql.SQLException;


@XmlDeserializer(XmlDefineType.Factory.class)
public class XmlDefineType extends XPathHolder implements IXmlDefineType {

  public static class Factory implements XmlDeserializerFactory<XmlDefineType> {

    @NotNull
    @Override
    public XmlDefineType deserialize(@NotNull final XMLStreamReader in) throws XMLStreamException {
      return XmlDefineType.deserialize(in);
    }
  }

  public static final String ELEMENTLOCALNAME = "define";
  public static final QName ELEMENTNAME = new QName(Engine.NAMESPACE, ELEMENTLOCALNAME, Engine.NSPREFIX);

  private String refNode;

  private String refName;

  public XmlDefineType() {}

  public XmlDefineType(final String name, final String refNode, final String refName, final String path, final char[] content, final Iterable<Namespace> originalNSContext) {
    super(content, originalNSContext, path, name);
    this.refNode = refNode;
    this.refName = refName;
  }

  @NotNull
  public static XmlDefineType deserialize(@NotNull final XMLStreamReader in) throws XMLStreamException {
    return deserialize(in, new XmlDefineType());
  }

  @NotNull
  @Override
  public QName getElementName() {
    return ELEMENTNAME;
  }

  @Override
  public boolean deserializeAttribute(final String attributeNamespace, @NotNull final String attributeLocalName, final String attributeValue) {
    switch (attributeLocalName) {
      case "refnode": setRefNode(attributeValue); return true;
      case "refname": setRefName(attributeValue); return true;
      default:
        return super.deserializeAttribute(attributeNamespace, attributeLocalName, attributeValue);
    }
  }

  @Override
  protected void serializeStartElement(@NotNull final XMLStreamWriter out) throws XMLStreamException {
    XmlUtil.writeStartElement(out, new QName(Engine.NAMESPACE, ELEMENTLOCALNAME, Engine.NSPREFIX));
  }

  @Override
  protected void serializeAttributes(@NotNull final XMLStreamWriter out) throws XMLStreamException {
    super.serializeAttributes(out);
    XmlUtil.writeAttribute(out, "refnode", getRefNode());
    XmlUtil.writeAttribute(out, "refname", getRefName());
  }

  /* (non-Javadoc)
     * @see nl.adaptivity.process.processModel.IXmlDefineType#getRefNode()
     */
  @Override
  public String getRefNode() {
    return refNode;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.IXmlDefineType#setRefNode(String)
   */
  @Override
  public void setRefNode(final String value) {
    this.refNode = value;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.XmlImportType#getName()
   */
  @Override
  public String getRefName() {
    return refName;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.XmlImportType#setName(java.lang.String)
   */
  @Override
  public void setRefName(final String value) {
    this.refName = value;
  }

  /**
   *
   * @param export
   * @return
   */
  @NotNull
  public static XmlDefineType get(final IXmlDefineType export) {
    if (export instanceof XmlDefineType) { return (XmlDefineType) export; }
    return new XmlDefineType(export.getName(), export.getRefNode(), export.getRefName(), export.getPath(), export.getContent(), export.getOriginalNSContext());
  }

  @Nullable
  @Override
  public <T extends IProcessNodeInstance<T>> ProcessData apply(final Transaction transaction, @NotNull final IProcessNodeInstance<T> node) throws SQLException {
    final ProcessData processData;
    if (refNode!=null) {
      final IProcessNodeInstance<T> predecessor = node.getPredecessor(transaction, refNode);
      final ProcessData origpair = predecessor.getResult(transaction, refName);
      if (origpair==null) {
        processData = null;
      } else {
        try {
          if (getXPath()==null) {
            processData = new ProcessData(getName(), origpair.getContent());
          } else {
            processData = new ProcessData(getName(), XmlUtil.nodeListToFragment((NodeList) getXPath().evaluate(origpair.getContentFragment(), XPathConstants.NODESET)));
          }
        } catch (@NotNull XPathExpressionException|XMLStreamException e) {
          throw new RuntimeException(e);
        }
      }
    } else {
      processData = null;
    }
    final char[] content = getContent();
    if (getContent()!=null && getContent().length>0) {
      try {
        final PETransformer transformer = PETransformer.create(SimpleNamespaceContext.from(getOriginalNSContext()), processData);

        final CompactFragment transformed = XmlUtil.siblingsToFragment(transformer.createFilter(getBodyStreamReader()));
        return new ProcessData(getName(), transformed);

      } catch (@NotNull final XMLStreamException e) {
        throw new RuntimeException(e);
      }
    } else {
      return processData;
    }
  }

}
