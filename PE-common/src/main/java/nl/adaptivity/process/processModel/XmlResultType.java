//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.08.27 at 08:15:55 PM CEST
//


package nl.adaptivity.process.processModel;

import nl.adaptivity.process.engine.PETransformer;
import nl.adaptivity.process.engine.ProcessData;
import nl.adaptivity.process.processModel.XmlResultType.Adapter;
import nl.adaptivity.process.processModel.XmlResultType.Factory;
import nl.adaptivity.util.xml.*;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Node;

import javax.xml.XMLConstants;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.NamespaceContext;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * <p>
 * Java class for ImportType complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="ImportType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="path" type="{http://www.w3.org/2001/XMLSchema}string" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
//@XmlAccessorType(XmlAccessType.NONE)
//@XmlType(name = "ResultType")
@XmlJavaTypeAdapter(Adapter.class)
@XmlDeserializer(Factory.class)
public class XmlResultType extends XPathHolder implements IXmlResultType, XmlSerializable {

  @XmlRootElement(name=XmlResultType.ELEMENTNAME)
  @XmlAccessorType(XmlAccessType.FIELD)
  @XmlType(name = "ResultType", propOrder = { "content" })
  public static class AdaptedResult extends XPathHolder {
    @XmlMixed
    @XmlAnyElement(lax = true)
    public List<Object> content = new ArrayList<>();

    @XmlAttribute(name="name", required = true)
    public String name;

  }

  public static class Adapter extends JAXBUnmarshallingAdapter {
    public Adapter() { super(XmlResultType.class); }
  }

  public static class OldAdapter extends XmlAdapter<AdaptedResult, XmlResultType> {

    @Override
    public XmlResultType unmarshal(final AdaptedResult v) throws Exception {
      ArrayList<Object> newContent = new ArrayList<>(v.content.size());
      for(Object o: v.content) {
        if (o instanceof Node) {
          try {
            newContent.add(XmlUtil.cannonicallize((Node) o));
          } catch (Exception e) {
            Logger.getAnonymousLogger().log(Level.WARNING, "Failure to cannonicalize node", e);
            newContent.add(o);
          }
        } else if(o instanceof CharSequence) {
          CharSequence s = (CharSequence) o;
          if (! XmlUtil.isXmlWhitespace(s)) {
            newContent.add(o);
          }
        } else {
          newContent.add(o);
        }
      }
      return new XmlResultType(v.name, v.getPath(), newContent, v.getNamespaceContext());
    }

    @Override
    public AdaptedResult marshal(final XmlResultType v) throws Exception {
      AdaptedResult result = new AdaptedResult();
      result.name = v.name;
      result.content = v.content;
      result.setPath(v.getPath());
      result.setNamespaceContext(v.getNamespaceContext());
      return result;
    }
  }

  public static class Factory implements XmlDeserializerFactory {

    @Override
    public XmlResultType deserialize(final XMLStreamReader in) throws XMLStreamException {
      if (in.getEventType()!= XMLStreamConstants.START_ELEMENT) { in.nextTag(); }
      XmlResultType result = new XmlResultType();
      Map<String, String> namespaceMap = new TreeMap<>();
      for(int i=in.getAttributeCount()-1; i>=0;--i) {
        String prefix = in.getAttributePrefix(i);
        if (prefix==null || XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {
          switch(in.getAttributeLocalName(i)) {
            case "name":
              result.name = in.getAttributeValue(i);
              break;
            case "path":
            case "xpath":
              result.setPath(in.getAttributeValue(i));
              break;
            case XMLConstants.XMLNS_ATTRIBUTE:
              break;
            default:
              Logger.getAnonymousLogger().log(Level.FINER, "Unsupported attribute in result: "+in.getAttributeName(i), in);
          }
        } else if (! XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {
          Logger.getAnonymousLogger().log(Level.FINER, "Unsupported attribute in result: "+in.getAttributeName(i), in);
        }
      }

      String path = result.getPath();
      if (path!=null) {

        for(int i = in.getNamespaceCount()-1; i>=0; --i) {
          namespaceMap.put(in.getNamespacePrefix(i), in.getNamespaceURI(i));
        }

        try {
          addXpathUsedPrefixes(namespaceMap, path, in.getNamespaceContext());
        } catch (XPathExpressionException e) {
          throw new RuntimeException(e);
        }
      }

      DocumentFragment documentFragment = XmlUtil.childrenToDocumentFragment(in, result);
      result.content = Collections.<Object>singletonList(documentFragment);
      if (namespaceMap.size()>0) {
        result.setNamespaceContext(new SimpleNamespaceContext(namespaceMap));
      }
      return result;
    }

  }

  public static final String ELEMENTNAME = "result";

  // TODO make this a documentfragment
  private List<Object> content;

  private String name;

  public XmlResultType() {}

  public XmlResultType(String name, final String pPath, List<Object> content, NamespaceContext namespaceContext) {
    this.name=name;
    this.content=content;
    setPath(pPath);
    setNamespaceContext(namespaceContext);
  }

  @Override
  public void serialize(final XMLStreamWriter out) throws XMLStreamException {

  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.IXmlResultType#getContent()
   */
  @Override
  public List<Object> getContent() {
    if (content == null) {
      content = new ArrayList<>();
    }
    return this.content;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.IXmlResultType#getName()
   */
  @Override
  public String getName() {
    return name;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.IXmlResultType#setName(java.lang.String)
   */
  @Override
  public void setName(final String value) {
    this.name = value;
  }

  public static XmlResultType get(IXmlResultType pImport) {
    if (pImport instanceof XmlResultType) { return (XmlResultType) pImport; }
    XmlResultType result = new XmlResultType(pImport.getName(), pImport.getPath(), null, pImport.getNamespaceContext());
    return result;
  }

  /**
   * Transform the given payload as specified by tag.
   * @param pPayload
   * @return
   */
  @Override
  public ProcessData apply(Node pPayload) {
    // TODO add support for variable and function resolvers.
    try {
      // shortcircuit missing path
      Node resultNode = (getPath()==null || ".".equals(getPath())) ? pPayload : (Node) getXPath().evaluate(pPayload, XPathConstants.NODE);
      ProcessData processData = new ProcessData(name, resultNode);
      if (content!=null && content.size()>0) {
        List<Node> result = PETransformer.create(processData).transform(content);
        return new ProcessData(name, result);
      } else {
        return processData;
      }


    } catch (XPathExpressionException e) {
      throw new RuntimeException(e);
    }
  }

}
