//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.08.27 at 08:15:55 PM CEST
//


package nl.adaptivity.process.processModel;

import nl.adaptivity.process.ProcessConsts.Engine;
import nl.adaptivity.process.engine.PETransformer;
import nl.adaptivity.process.engine.ProcessData;
import nl.adaptivity.util.xml.*;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Node;

import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.*;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;

import java.io.CharArrayReader;
import java.util.Map;


@XmlDeserializer(XmlResultType.Factory.class)
public class XmlResultType extends XPathHolder implements IXmlResultType, XmlSerializable {

  public static class Factory implements XmlDeserializerFactory {

    @Override
    public XmlResultType deserialize(final XMLStreamReader in) throws XMLStreamException {
      return XmlResultType.deserialize(in);
    }

  }

  public static XmlResultType deserialize(final XMLStreamReader in) throws XMLStreamException {
    return deserialize(in, new XmlResultType());
  }

  public static final String ELEMENTNAME = "result";

  public XmlResultType() {}

  @Deprecated
  public XmlResultType(String name, final String pPath, DocumentFragment content, NamespaceContext namespaceContext) {
    this(name, pPath, content==null ? null : XmlUtil.toString(content).toCharArray(), namespaceContext);
  }

  public XmlResultType(final String pName, String pPath, final char[] pContent, final NamespaceContext pOriginalNSContext) {
    super(pContent, pOriginalNSContext, pPath, pName);
  }

  @Override
  protected void serializeAttributes(final XMLStreamWriter out) throws XMLStreamException {
    super.serializeAttributes(out);
    if (getName() !=null) {
      out.writeAttribute("name", getName());
    }
  }

  @Override
  protected void serializeStartElement(final XMLStreamWriter pOut) throws XMLStreamException {
    XmlUtil.writeStartElement(pOut, new QName(nl.adaptivity.process.ProcessConsts.Engine.NAMESPACE, ELEMENTNAME, Engine.NSPREFIX));
  }

  @Override
  protected Map<String, String> findNamesInAttributeValue(final NamespaceContext referenceContext, final QName owner, final String pAttributeNamespace, final String pAttributeLocalName, final String pAttributeValue) {
    return super.findNamesInAttributeValue(referenceContext, owner, pAttributeNamespace, pAttributeLocalName, pAttributeValue);
  }

  public static XmlResultType get(IXmlResultType pImport) {
    if (pImport instanceof XmlResultType) { return (XmlResultType) pImport; }
    XmlResultType result = new XmlResultType(pImport.getName(), pImport.getPath(), (char[]) null, pImport.getNamespaceContext());
    return result;
  }

  /**
   * Transform the given payload as specified by tag.
   * @param pPayload
   * @return
   */
  @Override
  public ProcessData apply(Node pPayload) {
    // TODO add support for variable and function resolvers.
    try {
      // shortcircuit missing path
      Node resultNode = (getPath()==null || ".".equals(getPath())) ? pPayload : (Node) getXPath().evaluate(pPayload, XPathConstants.NODE);
      ProcessData processData = new ProcessData(getName(), resultNode);
      char[] content = getContent();
      if (content!=null && content.length>0) {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        DocumentFragment result = dbf.newDocumentBuilder().newDocument().createDocumentFragment();
        PETransformer.create(getNamespaceContext(), processData).transform(new StreamSource(new CharArrayReader(content)), new DOMResult(result));
        return new ProcessData(getName(), result);
      } else {
        return processData;
      }


    } catch (XPathExpressionException | ParserConfigurationException | XMLStreamException e) {
      throw new RuntimeException(e);
    }
  }

}
