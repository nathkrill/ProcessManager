//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.08.27 at 08:15:55 PM CEST
//


package nl.adaptivity.process.processModel;

import nl.adaptivity.process.ProcessConsts.Engine;
import nl.adaptivity.process.engine.PETransformer;
import nl.adaptivity.process.engine.ProcessData;
import nl.adaptivity.util.xml.*;
import nl.adaptivity.xml.GatheringNamespaceContext;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.Node;

import javax.xml.XMLConstants;
import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.*;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;

import java.io.CharArrayReader;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;


@XmlDeserializer(XmlResultType.Factory.class)
public class XmlResultType extends XPathHolder implements IXmlResultType, XmlSerializable {

  public static class Factory implements XmlDeserializerFactory {

    @Override
    public XmlResultType deserialize(final XMLStreamReader in) throws XMLStreamException {
      return XmlResultType.deserialize(in);
    }

  }

  public static XmlResultType deserialize(final XMLStreamReader in) throws XMLStreamException {
    if (in.getEventType()!= XMLStreamConstants.START_ELEMENT) { in.nextTag(); }
    XmlResultType result = new XmlResultType();
    Map<String, String> namespaceMap = new TreeMap<>();
    for(int i=in.getAttributeCount()-1; i>=0;--i) {
      String prefix = in.getAttributePrefix(i);
      if (prefix==null || XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {
        switch(in.getAttributeLocalName(i)) {
          case "name":
            result.name = in.getAttributeValue(i);
            break;
          case "path":
          case "xpath":
            result.setPath(in.getAttributeValue(i));
            break;
          case XMLConstants.XMLNS_ATTRIBUTE:
            break;
          default:
            Logger.getAnonymousLogger().log(Level.FINER, "Unsupported attribute in result: "+in.getAttributeName(i), in);
        }
      } else if (! XMLConstants.XMLNS_ATTRIBUTE.equals(prefix)) {
        Logger.getAnonymousLogger().log(Level.FINER, "Unsupported attribute in result: "+in.getAttributeName(i), in);
      }
    }

    String path = result.getPath();
    if (path!=null) {
      addXpathUsedPrefixes(path, new GatheringNamespaceContext(in.getNamespaceContext(), namespaceMap));
    }
    if (in.hasNext()) {
      if (in.next()!=XMLStreamConstants.END_ELEMENT) {
        result.setContent(in.getNamespaceContext(), XmlUtil.childrenToCharArray(in));
      }
    }

    if (! (in.getEventType()==XMLStreamConstants.END_ELEMENT|| in.getEventType()==XMLStreamConstants.END_DOCUMENT)) {
      throw new RuntimeException("Missing end tag");
    }


    if (namespaceMap.size()>0) {
      result.addNamespaceContext(new SimpleNamespaceContext(namespaceMap));
    }
    return result;
  }

  public static final String ELEMENTNAME = "result";

  private String name;

  public XmlResultType() {}

  @Deprecated
  public XmlResultType(String name, final String pPath, DocumentFragment content, NamespaceContext namespaceContext) {
    this(name, pPath, content==null ? null : XmlUtil.toString(content).toCharArray(), namespaceContext);
  }

  public XmlResultType(final String pName, String pPath, final char[] pContent, final NamespaceContext pOriginalNSContext) {
    super(pContent, pOriginalNSContext, pPath);
    name = pName;
  }

  @Override
  protected void serializeAttributes(final XMLStreamWriter out) throws XMLStreamException {
    super.serializeAttributes(out);
    if (name!=null) {
      out.writeAttribute("name", name);
    }
  }

  @Override
  protected void serializeStartElement(final XMLStreamWriter pOut) throws XMLStreamException {
    XmlUtil.writeStartElement(pOut, new QName(nl.adaptivity.process.ProcessConsts.Engine.NAMESPACE, ELEMENTNAME, Engine.NSPREFIX));
  }

  @Override
  protected Map<String, String> findNamesInAttributeValue(final NamespaceContext referenceContext, final QName owner, final String pAttributeNamespace, final String pAttributeLocalName, final String pAttributeValue) {
    return super.findNamesInAttributeValue(referenceContext, owner, pAttributeNamespace, pAttributeLocalName, pAttributeValue);
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.IXmlResultType#getName()
   */
  @Override
  public String getName() {
    return name;
  }

  /* (non-Javadoc)
   * @see nl.adaptivity.process.processModel.IXmlResultType#setName(java.lang.String)
   */
  @Override
  public void setName(final String value) {
    this.name = value;
  }

  public static XmlResultType get(IXmlResultType pImport) {
    if (pImport instanceof XmlResultType) { return (XmlResultType) pImport; }
    XmlResultType result = new XmlResultType(pImport.getName(), pImport.getPath(), (char[]) null, pImport.getNamespaceContext());
    return result;
  }

  /**
   * Transform the given payload as specified by tag.
   * @param pPayload
   * @return
   */
  @Override
  public ProcessData apply(Node pPayload) {
    // TODO add support for variable and function resolvers.
    try {
      // shortcircuit missing path
      Node resultNode = (getPath()==null || ".".equals(getPath())) ? pPayload : (Node) getXPath().evaluate(pPayload, XPathConstants.NODE);
      ProcessData processData = new ProcessData(name, resultNode);
      char[] content = getContent();
      if (content!=null && content.length>0) {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        DocumentFragment result = dbf.newDocumentBuilder().newDocument().createDocumentFragment();
        PETransformer.create(getNamespaceContext(), processData).transform(new StreamSource(new CharArrayReader(content)), new DOMResult(result));
        return new ProcessData(name, result);
      } else {
        return processData;
      }


    } catch (XPathExpressionException | ParserConfigurationException | XMLStreamException e) {
      throw new RuntimeException(e);
    }
  }

}
