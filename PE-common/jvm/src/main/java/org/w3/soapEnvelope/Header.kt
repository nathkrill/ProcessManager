/*
 * Copyright (c) 2018.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.09.24 at 08:12:58 PM CEST
//


package org.w3.soapEnvelope

import net.devrieze.util.StringUtil
import net.devrieze.util.security.SimplePrincipal
import nl.adaptivity.process.ProcessConsts.Engine
import nl.adaptivity.util.DomUtil
import nl.adaptivity.util.xml.SimpleXmlDeserializable
import nl.adaptivity.xml.*
import nl.adaptivity.xml.schema.annotations.AnyType
import nl.adaptivity.xml.schema.annotations.Attribute
import nl.adaptivity.xml.schema.annotations.Child
import nl.adaptivity.xml.schema.annotations.XmlName
import org.w3c.dom.Node

import javax.xml.namespace.QName
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.parsers.ParserConfigurationException

import java.util.ArrayList


/**
 * Elements replacing the wildcard MUST be namespace qualified, but can be in
 * the targetNamespace
 *
 *
 * Java class for Header complex type.
 *
 *
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="Header">
 * &lt;complexContent>
 * &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 * &lt;sequence>
 * &lt;any processContents='lax' maxOccurs="unbounded" minOccurs="0"/>
 * &lt;/sequence>
 * &lt;anyAttribute processContents='lax' namespace='##other'/>
 * &lt;/restriction>
 * &lt;/complexContent>
 * &lt;/complexType>
</pre> *
 */
@nl.adaptivity.xml.schema.annotations.Element(name = Header.ELEMENTLOCALNAME, nsUri = Envelope.NAMESPACE,
                                              nsPrefix = Envelope.PREFIX, attributes = arrayOf(Attribute("otherAttributes")),
                                              children = arrayOf(Child(name = "any", type = AnyType::class)))
class Header : SimpleXmlDeserializable, XmlSerializable {

    @XmlName("any")
    protected var _any: MutableList<Node>? = null

    val any: MutableList<Node>
        get() {
            return this._any ?: mutableListOf<Node>().also { _any = it }
        }

    val otherAttributes = mutableMapOf<QName, String>()

    var principal: SimplePrincipal? = null
        private set

    override val elementName: QName
        get() = ELEMENTNAME

    override fun deserializeChild(reader: XmlReader): Boolean {
        if (reader.isElement(PRINCIPALQNAME)) {
            // XXX make sure this is secure
            principal = SimplePrincipal(reader.readSimpleElement().toString())
        } else {
            any.add(DomUtil.childToNode(reader))
        }
        return true
    }

    override fun deserializeChildText(elementText: CharSequence): Boolean {
        if (isXmlWhitespace(elementText)) {
            return true
        }
        val dbf = DocumentBuilderFactory.newInstance()
        try {
            val doc = dbf.newDocumentBuilder().newDocument()
            any.add(doc.createTextNode(elementText.toString()))
        } catch (e: ParserConfigurationException) {
            throw RuntimeException(e)
        }

        return true
    }

    override fun deserializeAttribute(attributeNamespace: CharSequence,
                                      attributeLocalName: CharSequence,
                                      attributeValue: CharSequence): Boolean {
        val qname = QName(StringUtil.toString(attributeNamespace), StringUtil.toString(attributeLocalName)!!)
        otherAttributes[qname] = attributeValue.toString()
        return true
    }

    override fun onBeforeDeserializeChildren(reader: XmlReader) {
        // nothing
    }

    override fun serialize(out: XmlWriter) {
        out.smartStartTag(elementName) {
            val out = this
            for ((key, value) in otherAttributes) {
                writeAttribute(key, value)
            }
            principal?.let { writeSimpleElement(PRINCIPALQNAME, it.toString()) }

            for (n in any) {
                out.serialize(n)
            }
        }
    }

    companion object {

        const val ELEMENTLOCALNAME = "Header"
        val ELEMENTNAME = QName(Envelope.NAMESPACE, ELEMENTLOCALNAME, Envelope.PREFIX)
        const val PRINCIPALLOCALNAME = "principal"
        val PRINCIPALQNAME = QName(Engine.getNAMESPACE(), "principal",
                                   Engine.getNSPREFIX())

        fun deserialize(reader: XmlReader): Header {
            return Header().deserializeHelper(reader)
        }
    }

}
