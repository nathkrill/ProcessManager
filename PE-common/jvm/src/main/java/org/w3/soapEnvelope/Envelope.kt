/*
 * Copyright (c) 2018.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.09.24 at 08:12:58 PM CEST
//


package org.w3.soapEnvelope

import net.devrieze.util.StringUtil
import nl.adaptivity.util.multiplatform.URI
import nl.adaptivity.util.xml.CompactFragment
import nl.adaptivity.util.xml.ICompactFragment
import nl.adaptivity.xml.*
import nl.adaptivity.xml.schema.annotations.Attribute
import nl.adaptivity.xml.schema.annotations.Child


/**
 *
 *
 * Java class for Envelope complex type.
 *
 *
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * <pre>
 * &lt;complexType name="Envelope">
 * &lt;complexContent>
 * &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 * &lt;sequence>
 * &lt;element ref="{http://www.w3.org/2003/05/soap-envelope}Header" minOccurs="0"/>
 * &lt;element ref="{http://www.w3.org/2003/05/soap-envelope}Body"/>
 * &lt;/sequence>
 * &lt;anyAttribute processContents='lax' namespace='##other'/>
 * &lt;/restriction>
 * &lt;/complexContent>
 * &lt;/complexType>
</pre> *
 */
@nl.adaptivity.xml.schema.annotations.Element(name = Envelope.ELEMENTLOCALNAME, nsUri = Envelope.NAMESPACE,
                                              nsPrefix = Envelope.PREFIX, attributes = arrayOf(Attribute("otherAttributes")),
                                              children = arrayOf(Child(type = Header::class),
                                                                 Child(type = Body::class)))
@XmlDeserializer(Envelope.Factory::class)
class Envelope<T : XmlSerializable>() : XmlSerializable {

    var header: Header? = null

    var body: Body<T>? = null

    private val otherAttributes = HashMap<QName, String>()

    var encodingStyle = URI.create("http://www.w3.org/2003/05/soap-encoding")

    val elementName: QName
        get() = ELEMENTNAME

    class Factory : XmlDeserializerFactory<Envelope<*>> {

        override fun deserialize(reader: XmlReader): Envelope<*> {
            return Envelope.deserialize(reader)
        }
    }

    constructor(body: Body<T>) : this() {
        this.body = body
    }

    constructor(content: T) : this(Body<T>(content)) {}

    fun deserializeAttribute(attributeNamespace: CharSequence,
                             attributeLocalName: CharSequence,
                             attributeValue: CharSequence): Boolean {
        if (StringUtil.isEqual("encodingStyle", attributeLocalName)) {
            encodingStyle = URI.create(StringUtil.toString(attributeValue)!!)
            return true
        }
        val qname = QName(StringUtil.toString(attributeNamespace), StringUtil.toString(attributeLocalName)!!)
        otherAttributes[qname] = attributeValue.toString()
        return true
    }

    fun deserializeChild(`in`: XmlReader, bodyDeserializer: XmlDeserializerFactory<T>): Boolean {
        if (StringUtil.isEqual(NAMESPACE, `in`.namespaceUri)) {
            if (StringUtil.isEqual(Header.ELEMENTLOCALNAME, `in`.localName)) {
                header = Header.deserialize(`in`)
                return true
            } else if (StringUtil.isEqual(Body.ELEMENTLOCALNAME, `in`.localName)) {
                body = Body.deserialize(`in`, bodyDeserializer)
                return true
            }
        }
        return false
    }

    override fun serialize(out: XmlWriter) {
        out.smartStartTag(elementName) {
            writeAttribute("encodingStyle", encodingStyle)
            for ((key, value) in otherAttributes) {
                writeAttribute(key, value)
            }
            writeChild(header)
            writeChild(body)
        }
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property
     * on this class.
     *
     *
     * the map is keyed by the name of the attribute and the value is the string
     * value of the attribute. the map returned by this method is live, and you
     * can add new attribute by updating the map directly. Because of this design,
     * there's no setter.
     *
     * @return always non-null
     */
    fun getOtherAttributes(): Map<QName, String> {
        return otherAttributes
    }

    companion object {

        const val NAMESPACE = "http://www.w3.org/2003/05/soap-envelope"

        const val ELEMENTLOCALNAME = "Envelope"

        const val PREFIX = "env"

        val ELEMENTNAME = QName(NAMESPACE, ELEMENTLOCALNAME, PREFIX)

        const val MIMETYPE = "application/soap+xml"

        fun deserialize(`in`: XmlReader): Envelope<out ICompactFragment> {
            return deserialize(`in`, CompactFragment.FACTORY)
        }

        fun <T : XmlSerializable> deserialize(reader: XmlReader,
                                              bodyDeserializer: XmlDeserializerFactory<T>): Envelope<T> {
            val result = Envelope<T>()
            reader.skipPreamble()
            val elementName = result.elementName
            assert(reader.isElement(elementName)) { "Expected " + elementName + " but found " + reader.localName }
            for (i in reader.attributeCount - 1 downTo 0) {
                result.deserializeAttribute(reader.getAttributeNamespace(i), reader.getAttributeLocalName(i),
                                            reader.getAttributeValue(i))
            }
            var event: EventType? = null
            loop@ while (reader.hasNext() && event !== EventType.END_ELEMENT) {
                event = reader.next()
                when (event) {
                    EventType.START_ELEMENT -> {
                        if (result.deserializeChild(reader, bodyDeserializer)) {
                            continue@loop
                        }
                        reader.unhandledEvent()
                    }
                    else                    -> reader.unhandledEvent()
                }
            }
            return result
        }
    }

}
