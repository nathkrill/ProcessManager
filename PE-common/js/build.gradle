/*
 * Copyright (c) 2018.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

buildscript {

    dependencies {
        classpath "net.devrieze:gradle-codegen:${codegen_version}"
    }

    repositories {
        mavenLocal()
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap-1.1'
        }
        jcenter()
    }
}

//plugins {
//    id "net.devrieze.gradlecodegen" version "0.5.6"
//}

apply plugin: 'kotlin-platform-js'
apply plugin: 'idea'
apply plugin: 'net.devrieze.gradlecodegen'

sourceCompatibility = myJavaVersion
targetCompatibility = myJavaVersion

archivesBaseName = "PE-common"

configurations {
    generateXml
    testJarConfig {
        extendsFrom testRuntime
    }
    compileXmlJava {
        extendsFrom runtime
    }
    compileXmlOnly {
        extendsFrom compileOnly
    }
}

version = '1.0.0'
description = 'A library with process engine support classes'

//group = ['util', 'process' ]


task testJar(type: Jar) {
    from sourceSets.test.output
    classifier = 'test'
}

artifacts {
    testRuntime testJar
}

test {
    useTestNG()
}

dependencies {
    expectedBy project(':PE-common:common')
/*
    generateXml project(':xmlutil:generator')
*/
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    implementation project(':multiplatform:js')
    implementation project(':java-common:js')
    implementation project(':xmlutil:core:js')
//    testRuntime project(':xmlutil:js')
//    compileOnly project(':DarwinJavaApi')
//    generateXml project(':DarwinJavaApi')
}

sourceCompatibility = JavaVersion.VERSION_1_8 //myJavaVersion
targetCompatibility = JavaVersion.VERSION_1_8 //myJavaVersion

sourceSets {
    xml {
        generate {
            info {
                input = { main.runtimeClasspath }
                generator = 'nl.adaptivity.xml.generators.Info'
                output = new File(buildDir, "/xmlinfo/xmlinfo.txt")
            }
        }
    }
}

generateXml {
//    dependsOn classes
    outputs.file("${buildDir}/xmlinfo/xmlinfo.txt")
    dirGenerator {
        input = { sourceSets.main.runtimeClasspath }
        generator = "nl.adaptivity.xml.generators.Factory"
    }
}

compileXmlJava {
    classpath+=sourceSets.main.runtimeClasspath
    doFirst {
        System.err.println("compileXml classpath")
        classpath.forEach { e ->
            System.err.println("  $e")
        }
    }
}

artifacts {
    testRuntime testJar
}

test {
    useTestNG()
}
