/*
 * Copyright (c) 2018.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2009.08.27 at 08:15:55 PM CEST
//


package nl.adaptivity.process.processModel

import nl.adaptivity.messaging.EndpointDescriptor
import nl.adaptivity.messaging.EndpointDescriptorImpl
import nl.adaptivity.process.ProcessConsts.Engine
import nl.adaptivity.util.multiplatform.createUri
import nl.adaptivity.util.xml.CompactFragment
import nl.adaptivity.util.xml.ExtXmlDeserializable
import nl.adaptivity.xml.*


/**
 *
 *
 * Java class for Message complex type.
 *
 *
 * The following schema fragment specifies the expected content contained within
 * this class.
 *
 * ```
 * <pre>
 * <complexType name="Message">
 * <complexContent>
 * <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 * <sequence>
 * <any processContents='lax'/>
 * </sequence>
 * <attribute name="serviceNS" type="{http://www.w3.org/2001/XMLSchema}string" />
 * <attribute name="endpoint" type="{http://www.w3.org/2001/XMLSchema}string" />
 * <attribute name="operation" type="{http://www.w3.org/2001/XMLSchema}string" />
 * <attribute name="serviceName" type="{http://www.w3.org/2001/XMLSchema}NCName" />
 * <attribute name="url" type="{http://www.w3.org/2001/XMLSchema}string" />
 * <attribute name="method" type="{http://www.w3.org/2001/XMLSchema}string" />
 * </restriction>
 * </complexContent>
 * </complexType>
 * ```
 */
@XmlDeserializer(XmlMessage.Factory::class)
class XmlMessage : BaseMessage, IXmlMessage, ExtXmlDeserializable {

    override val endpointDescriptor: EndpointDescriptor?
        get() {
            val url = url
            return EndpointDescriptorImpl(service!!, endpoint, createUri(url))
        }

    class Factory : XmlDeserializerFactory<XmlMessage> {

        override fun deserialize(reader: XmlReader): XmlMessage {
            return XmlMessage.deserialize(reader)
        }
    }

    constructor() : super() { /* default constructor */
    }


    constructor(service: QName?,
                endpoint: String,
                operation: String,
                url: String,
                method: String,
                contentType: String,
                messageBody: CompactFragment) : super(service, endpoint, operation, url, method, contentType,
                                                      messageBody) {
    }


    fun setContentType(type: String) {
        super.setType(type)
    }

    companion object {

        val ELEMENTLOCALNAME = "message"

        val ELEMENTNAME = QName(Engine.NAMESPACE, ELEMENTLOCALNAME, Engine.NSPREFIX)


        operator fun get(message: IXmlMessage?): XmlMessage? {
            return if (message == null) {
                null
            } else message as? XmlMessage ?: XmlMessage(message.service,
                                                        message.endpoint,
                                                        message.operation,
                                                        message.url,
                                                        message.method,
                                                        message.contentType,
                                                        message.messageBody)
        }

        fun deserialize(reader: XmlReader): XmlMessage {
            return XmlMessage().deserializeHelper(reader)
        }
    }


}
