apply plugin: 'java'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'idea'

defaultTasks 'tomcatRun'

version = '1.0.0'
description = 'A project for running an embedded tomcat server that works.'
/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with Foobar.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//group = ['util' ]


configurations {
    extraBootCp {
        description "This configuration allows for assembling all the jars for the boot classpath of catalina"
    }
    warContents {
        description "The contents of the combined war file"
    }
    runtime
}

dependencies {
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
//    tomcat dbcpSpec

    extraBootCp 'mysql:mysql-connector-java:5.1.36'
    extraBootCp project(':DarwinJavaApi')
    extraBootCp project(':JavaCommonApi')
    extraBootCp project(':DarwinRealm')
    // Todo dynamically determine version needed from -api version
    extraBootCp 'org.slf4j:slf4j-simple:1.7.12'
//    extraBootCp dbcpSpec

    tomcat 'mysql:mysql-connector-java:5.1.36'
    tomcat project(':DarwinJavaApi')
    tomcat project(':JavaCommonApi')
    tomcat project(':DarwinRealm')
/*    tomcat project(path: ':ProcessEngine', configuration: 'tomcatExtCompile')
    tomcat project(path: ':ProcessEngine', configuration: 'compile')
    tomcat project(path: ':ProcessEngine', configuration: 'webCompile')*/
//    tomcat project(path: ':PEUserMessageHandler', configuration: 'apiCompile')
//    compile project(':darwin:jvm')
    warContents project(path: ':PEUserMessageHandler', configuration: 'runtime')
    warContents project(':DarwinServices')
    warContents project(path: ':darwin:jvm', configuration: 'warConfig')
    warContents project(path: ':ProcessEngine')
    warContents project(':accountmgr')
/*    tomcatRunWar ':ProcessEngine:tomcatExtClasses'*/
/*    tomcatRun project(':ProcessEngine').tasks['war']*/
}


idea {
    module {
        scopes.PROVIDED.plus += [configurations.tomcat]
        scopes.TEST.plus += [configurations.tomcat]
    }
}

tomcat {
    contextPath='/'
    daemon=false

    users {
        user {
            username = 'pdvrieze'
            password = 'geheim'
            roles = ['admin']
        }
    }

}

task assembleExtraBootCp(type: Copy) {
    from configurations.extraBootCp
    into "${buildDir}/bootClasspath"
}


task war(type: War, overwrite:true, dependsOn: configurations.warContents, group:'build') {
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    configurations.warContents.each { File file ->
        def depPath = file.path
        if (depPath.endsWith("war")) {
            into("/") {
                logger.info("Extracting war ${file}")
                from zipTree(file.absolutePath)
                include { innerFile ->
                    def path = innerFile.path
                    def name = innerFile.name
                    def result = name.endsWith(".js") && path.startsWith("META-INF/resources") || !(path.startsWith("META-INF/") || name.endsWith("web.xml"))
                    result
                }
                exclude { f ->
                    def r = f.name.endsWith(".class") && f.relativePath.segments[0]=="js"
                    if (r) logger.warn("Skipping inclusion of `$f` into archive (from: ${file}).")
                    return r
                }

            }
        } else if (! (file.name.startsWith("gwt-user-") )){
            into("/WEB-INF/lib") {
                logger.info("Adding library $depPath")
                from file
            }
        }
    }
}

artifacts { runtime war }


tomcatRun() {
/*
    dependsOn: configurations.warContents
    configurations.warContents.each { File file ->
        def depPath = file.path
        if (depPath.endsWith("war")) {
            into("/") {
                logger.lifecycle("Extracting war ${file}")
                from zipTree(file.absolutePath)
                include { innerFile ->
                    def path = innerFile.path
                    def name = innerFile.name
                    def result = name.endsWith(".js") && path.startsWith("META-INF/resources") || !(path.startsWith("META-INF/") || name.endsWith("web.xml") */
/*|| (name.endsWith(".jar")&& seen.contains(name))*//*
)
                    result
                }
            }
        } else if (! (file.name.startsWith("gwt-user-") )){
            into("/WEB-INF/lib") {
                logger.lifecycle("Adding library $depPath")
                from file
            }
        }
    }
*/


    doFirst {
//        webAppClasspath=webAppClasspath.plus(project(':ProcessEngine').sourceSets.tomcat.runtimeClasspath)
        logger.lifecycle('Running Tomcat')
        configurations.tomcat.allDependencies.each({ logger.debug("Dependency: $it")})
//        sourceSets.main.compileClasspath.each({ println("CompileClasspath: $it") })
        logger.info('');
        tomcatClasspath.each({ logger.info("TomcatClasspath: $it")})
        logger.info('')

        System.setProperty('nl.adaptivity.messaging.localurl', 'http://localhost:8080')
//	    systemProperties 'nl.adaptivity.messaging.baseurl': 'http://localhost:8080'
    }

}


[tomcatRun, tomcatRunWar]*.webDefaultXml = file ('src/main/webapp/WEB-INF/web.xml')
[tomcatRun, tomcatRunWar]*.configFile = file ('src/main/webapp/META-INF/context.xml')


//artifacts {
//    extraBootCp tasks.assembleExtraBootCp
//}

idea {
    module {
        excludeDirs << file('catalina')
        excludeDirs << file('catalina7')

    }
}