/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with ProcessManager.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

buildscript {
//    ext.androidPluginVersion = '3.0.0-alpha9'
    ext.androidPluginVersion = '2.3.3'
    ext.kotlin_version = '1.1.51'
    ext.kotlin_plugin_version = kotlin_version
//    ext.kotlinx_html_version = '0.5.12'
    ext.kotlinx_html_version = '0.6.3'
    ext.codegen_version = '0.5.8'
    ext.junit5_version='1.0.0'
    ext.jupiterVersion = '5.0.0'
    ext.spekVersion = '1.1.5'
    ext.testngVersion = '6.9.13.8'
    repositories {
        mavenLocal()
        maven {
            url='https://dl.bintray.com/kotlin/kotlin-eap-1.2'
        }
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidPluginVersion" //1.5.0
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.4'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

}

//plugins {
//    id "net.devrieze.gradlecodegen" version "0.5.5"
//}

apply plugin: 'idea'
apply plugin: 'project-report'


description = 'The overall project that manages all artefacts of the processmanager'

ext {
    androidTarget = 25
    tomcatVersion = '7.0.68'
    androidCompatVersion = androidTarget==25 ? '25.3.1' : '26.1.0'
    androidBuildToolsVersion = '26.0.2'
    dbcpSpec = "com.zaxxer:HikariCP:2.4.5"
    collectDir = "${buildDir}/artifacts"
    easywsdlver = '2.6.0'
    requirejs_version = '2.3.2'

    myJavaVersion = JavaVersion.VERSION_1_7
}

configurations {
    tomcatWars
    tomcatClasspath
    if (androidEnabled) {
        androidApps
    }
    wsDoc
}

dependencies {
    tomcatWars project(path: ":ProcessEngine:servlet", configuration: 'archives')
    tomcatWars project(path: ":PEUserMessageHandler", configuration: 'archives')
    tomcatWars project(path: ":accountmgr", configuration: 'archives')
    tomcatWars project(path: ":darwin:jvm", configuration: 'warConfig')
    tomcatWars project(path: ":webeditor", configuration: 'archives')
    tomcatWars project(path: ":DarwinServices", configuration: 'archives')


    tomcatClasspath 'mysql:mysql-connector-java:5.1.36'
    tomcatClasspath project(':DarwinJavaApi')
    tomcatClasspath project(':JavaCommonApi')
    tomcatClasspath project(':DarwinRealm')

    if (Boolean.valueOf(androidEnabledProp)) {
        androidApps project(':android-auth')
        androidApps project(':PMEditor')
    }

    wsDoc project(path: "ProcessEngine:servlet", configuration: 'wsDocOutput')
    wsDoc project(path: "PEUserMessageHandler", configuration: 'wsDocOutput')
}

def soapTarget = file("wiki/SOAP")
if (soapTarget.isDirectory()) {
    task wsDoc(type: Copy) {
        group = "documentation"
        dependsOn configurations.wsDoc
        destinationDir = file("wiki")

        into('.') {
            from files({ dependsOn.findAll{dep -> dep instanceof Configuration } })
//            from files({ dependsOn.findAll { dep -> dep instanceof Configuration } })
            include '**/SOAP/*.md'
            exclude '**/*InternalEndpointImpl.md'
            rename { path ->
                def file = path.substring(path.lastIndexOf('/')+1)
                def extPos = file.lastIndexOf('.')
                def dotPos = file.lastIndexOf('.', extPos -1) // we want the second last dot, the last is the extension one
                if (dotPos >= 0) {
                    file.substring(dotPos + 1, extPos)+"_SOAP.md"
                } else file
            }
        }

        into('.') {
            from files({ dependsOn.findAll{dep -> dep instanceof Configuration } })
            include '**/REST/*.md'
            rename { path ->
                def file = path.substring(path.lastIndexOf('/')+1)
                def dotPos = file.lastIndexOf('.', file.lastIndexOf('.')-1) // we want the second last dot, the last is the extension one
                def extPos = file.lastIndexOf('.')
                if (dotPos >= 0) {
                    file.substring(dotPos + 1, extPos)+"_REST.md"
                } else file
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
}

task copyTomcatWars(type:Copy) {
    group = "dist"
    dependsOn configurations.tomcatWars
    from files { dependsOn.findAll { dep -> dep instanceof Configuration } }
    into "${collectDir}/webapps/"
}

task copyTomcatClasspath(type:Copy) {
    group = "dist"
    dependsOn configurations.tomcatClasspath
    from files { dependsOn.findAll { dep -> dep instanceof Configuration } }
    into "${collectDir}/tomcatlibs/"
    exclude { file -> file.name.contains("tomcat-servlet-api") }
}

if (Boolean.valueOf(androidEnabledProp)) {
    task copyAndroid(type: Copy) {
        group = "dist"
        dependsOn configurations.androidApps
        from files { dependsOn.findAll { dep -> dep instanceof Configuration } }
        into "${collectDir}/androidApps/"
    }
}

task dist {
    group = "dist"
    dependsOn copyTomcatWars, copyTomcatClasspath
    if (Boolean.valueOf(androidEnabledProp)) {
        dependsOn copyAndroid
    }
}

task run(dependsOn: [':PE-server:tomcatRun'], type:DefaultTask) {
    group='application'
    description='Run the server in a simple configuration'
}



htmlDependencyReport {
    projects = project.allprojects
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        maven() {
            url="https://dl.bintray.com/kotlin/kotlin-dev"
        }
	maven() {
	    url="https://maven.google.com"
	}
        maven() {
            url="https://dl.bintray.com/kotlin/kotlinx.html"
        }
        maven {
            url='https://dl.bintray.com/kotlin/kotlin-eap-1.2'
        }
        maven {
            url='https://dl.bintray.com/jetbrains/spek'
        }
    }
//
//    if (JavaVersion.current().isJava8Compatible()) {
//        tasks.withType(Javadoc) {
//            options.addStringOption('Xdoclint:none', '-quiet')
//        }
//    }
}

idea{
    project {
        languageLevel = JavaVersion.VERSION_1_8
    }
    module {
        downloadSources = true
        contentRoot= projectDir
    }
}
