apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'

version = '1.0.0'
description = 'The service that provides the process coordination system'
/*
 * Copyright (c) 2016.
 *
 * This file is part of ProcessManager.
 *
 * ProcessManager is free software: you can redistribute it and/or modify it under the terms of version 3 of the
 * GNU Lesser General Public License as published by the Free Software Foundation.
 *
 * ProcessManager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with Foobar.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

//group = ['server', 'service' ]


configurations {
    main {
        // This combines base, web and tomcat but this is needed for intellij tomcat support
        description = "The main compilation sources that just take all sources to put into the war"
    }
    baseCompile {
        description = "The main source that is not dependend on servlet api's"
    }
    baseProvided {
        description = "Compile time only dependencies for the base"
    }
    webCompile {
        description = "The web version that is not dependent on tomcat as a host"
        extendsFrom baseCompile
    }
    webProvided {
       description = "Compile time only dependencies - not included in war"
    }
    tomcatExtProvided {
        description = "Tomcat compile time only dependencies - not included in war"
        transitive false
    }
    tomcatExtCompile {
        description = "Those classes that depend on tomcat as webhost"
        extendsFrom webCompile
        transitive false
    }
}

task testJar(type: Jar) {
    baseName = "${project.name}-test"
    from sourceSets.test.output
}

artifacts {
    main war
    testRuntime testJar
}

dependencies {
    compile project(':java-common')
    compile project(':PE-common')

    testCompile project(':DarwinJavaApi')
    testCompile 'org.testng:testng:6.9.9'
    testCompile 'xmlunit:xmlunit:1.6'
    testCompile project(path: ':PE-common', configuration:"testRuntime")
    testCompile "org.apache.tomcat:servlet-api:${tomcatVersion}"

    runtime 'com.fasterxml.woodstox:woodstox-core:5.0.1'

//    providedCompile "org.apache.tomcat:catalina:${tomcatVersion}"
//    providedCompile project(path: ':PE-common', configuration:'providedCompile')


    baseCompile project(':java-common')
    baseCompile project(':PE-common')
    baseProvided project(':DarwinJavaApi')
//    providedCompile "org.apache.tomcat:catalina:${tomcatVersion}"

    webProvided "org.apache.tomcat:servlet-api:${tomcatVersion}"

    tomcatExtProvided "org.apache.tomcat:catalina:${tomcatVersion}"

//    configurations['runtime'].extendsFrom configurations['tomcatExtCompile']
}

test {
    useTestNG()
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

webAppDirName = 'src/base/webapp'

sourceSets {
    base {
        java {
            srcDir 'src/base/java'
        }
        compileClasspath += configurations.baseProvided
    }
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/base/java'
            srcDir 'src/web/java'
            srcDir 'src/tomcat/java'
        }
        compileClasspath+=configurations.baseProvided+configurations.webProvided+configurations.tomcatExtProvided
    }
    web {
        java {
            srcDir 'src/web/java'
        }
    }
    web.compileClasspath += files(base.runtimeClasspath)
    web.compileClasspath += configurations.baseProvided
    web.compileClasspath += configurations.webProvided
    web.runtimeClasspath += files(base.runtimeClasspath)

    tomcatExt {
        java {
            srcDir 'src/tomcat/java'
        }
        compileClasspath += files (web.compileClasspath)
        compileClasspath += configurations.tomcatExtProvided
        compileClasspath.each({ logger.debug("Tomcat compile classpath: $it")})
        runtimeClasspath += files(web.runtimeClasspath)
    }

}

war {
//    classpath sourceSets.web.output
//    classpath sourceSets.tomcatExt.output
//    classpath sourceSets.main.output
}

war.dependsOn(task('baseCompile'))
war.dependsOn(task('webCompile'))
war.dependsOn(task('tomcatExtCompile'))

jar {
    from sourceSets.base.output
    from sourceSets.web.output
    from sourceSets.tomcatExt.output
}

idea {
    module {
        scopes.COMPILE.minus += [configurations.providedCompile, configurations.baseProvided, configurations.webProvided, configurations.tomcatExtCompile]
        scopes.PROVIDED.plus += [configurations.providedCompile, configurations.baseProvided, configurations.webProvided, configurations.tomcatExtCompile, configurations.tomcatExtProvided]
    }
}

/*
task tomcatRun(dependsOn: [war, sourceSets.tomcat.runtimeClasspath]) {
    group='web application'
    description = "Do everything needed to be able to run as embedded tomcat"

}*/
/*
compileWebJava {
    doFirst {
        println("webJava")
        configurations.tomcatExtCompile.allDependencies.each({ println("Dependency: $it")})
        sourceSets.tomcatExt.compileClasspath.each({ println("CompileClasspath: $it") })
    }
}
*/
