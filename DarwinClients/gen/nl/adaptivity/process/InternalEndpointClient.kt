/*
 * Generated by MessagingSoapClientGenerator.
 * Source class: nl.adaptivity.process.userMessageHandler.server.InternalEndpoint
 */

@file:Suppress("all")
package nl.adaptivity.process.client

import java.net.URI
import java.util.Arrays
import java.util.concurrent.Future

import javax.xml.bind.JAXBElement
import javax.xml.bind.JAXBException
import javax.xml.namespace.QName
import javax.xml.transform.Source

import net.devrieze.util.Tripple

import nl.adaptivity.messaging.CompletionListener
import nl.adaptivity.messaging.Endpoint
import nl.adaptivity.messaging.EndpointDescriptor
import nl.adaptivity.messaging.EndpointDescriptorImpl
import nl.adaptivity.messaging.MessagingRegistry
import nl.adaptivity.messaging.SendableSoapSource
import nl.adaptivity.process.messaging.ActivityResponse
import nl.adaptivity.process.userMessageHandler.server.UserTask
import nl.adaptivity.ws.soap.SoapHelper
import nl.adaptivity.xml.XmlException

object InternalEndpointClient {

  @JvmStatic
  @Throws(JAXBException::class, XmlException::class)  fun postTask(repliesParam: EndpointDescriptorImpl, taskParam: UserTask<*>, completionListener: CompletionListener<ActivityResponse<Boolean>>?, vararg jaxbcontext: Class<*>): Future<ActivityResponse<Boolean>> {
    val param0 = Tripple.tripple("repliesParam", EndpointDescriptorImpl::class.java, repliesParam)
    val param1 = Tripple.tripple("taskParam", UserTask::class.java, taskParam)

    val message = SoapHelper.createMessage(QName("postTask"), listOf(param0, param1))

    val endpoint = EndpointDescriptorImpl(SERVICE, ENDPOINT, LOCATION)

    return MessagingRegistry.sendMessage(SendableSoapSource(endpoint, message), completionListener, ActivityResponse::class.java, jaxbcontext)
  }

  @JvmStatic  private val SERVICE: QName = QName("http://adaptivity.nl/userMessageHandler", "userMessageHandler", "")
  private const val ENDPOINT = "internal"
  @JvmStatic  private val LOCATION: URI? = null

}
