apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

version = '1.0.0'
description = 'A project for the automatically generated service clients for various services'
group = 'server'

def genDir = projectDir.absolutePath+'/gen'
def genClasses = ['nl.adaptivity.process.userMessageHandler.server.InternalEndpoint' , 'nl.adaptivity.process.engine.servlet.ServletProcessEngine']

configurations {
    codegen

    providedCompile
}

sourceSets {
    main {
        java {
            srcDir 'src'
            srcDir genDir
        }
        compileClasspath+=configurations.providedCompile
    }
}

task generate(dependsOn: [':DarwinGenerators:assemble', ':ProcessEngine:tomcatExtClasses', ':PEUserMessageHandler:apiClasses' ] , type:JavaExec) {
    group = 'build'
    description = 'Generate the client sources'

    doFirst {
        println()
        main = 'nl.adaptivity.messaging.MessagingSoapClientGenerator'
        def cp = configurations.codegen
                .plus(project(':PEUserMessageHandler').sourceSets.api.runtimeClasspath)
                .plus(project(':ProcessEngine').sourceSets.tomcatExt.runtimeClasspath)
                .plus(project(':ProcessEngine').sourceSets.tomcatExt.output)

//        def cp2 = project(':PEUserMessageHandler').sourceSets.api.runtimeClasspath
//        def cp2 = sourceSets.codegen.compileClasspath
//        cp2.each({println("cp2 $it")})

//        def cp = configurations.codegen
        classpath = cp
        args '-cp'
        args cp.join(':')

//        cp.each({ println("classpath: $it");})

        args '-package', 'nl.adaptivity.process.client', '-dstdir', genDir
        genClasses.each {
            def y=it
            args y
        }
    }

/*
//    inputs.file rootProject.findProject('DarwinGenerators').getTasksByName('assemble')
//    outputs.dir genDir
    doLast {
        println("Generating clients")
        def t= rootProject.DarwinGenerators.run
        t.args=["-package","nl.adaptivity.process.client",
                 "-dstdir",genDir]
        t.args.addAll(gen)
        t.execute()

        //    ant.generate()
    }*/
}

compileJava.dependsOn generate

dependencies {
    codegen project(':DarwinGenerators')
    codegen project(path: ':PEUserMessageHandler', configuration: 'apiCompile')
    codegen project(path: ':ProcessEngine', configuration: 'tomcatExtCompile')
//    compile 'generate'
    compile project(':JavaCommonApi')
    compile project(':java-common')
    compile project(':PE-common')
    providedCompile "org.apache.tomcat:servlet-api:${tomcatVersion}"
}